class Solution {
    //执行用时1ms，内存消耗33MB
    // public int uniquePaths(int m, int n) {
    //     int [][] shape = new int[m][n];
    //     for (int i = m - 1; i >= 0; i --){
    //         for (int j = n - 1; j >= 0;j --){
    //             int right = j < n - 1 ? shape[i][j + 1]:0;
    //             int down  = i < m - 1 ? shape[i + 1][j]:0;
    //             shape[i][j] = right + down;
    //             if (i == m - 1 && j == n - 1){
    //                 shape[i][j] = 1;
    //             }
    //         }
    //     }
    //     return shape[0][0];
    // }

    //优化：优化方向是二维数组直接升级成为一维数组
    //执行用时 0ms,内存消耗 32.8MB
    public int uniquePaths(int m, int n) {
        if (m == 1 || n == 1){
            return 1;
        }
        int [] array = new int [n];
        for (int i = 0; i < n ; i ++){
            array[i] = 1;
        }
        for (int i = m - 2 ;i >= 0; i -- ){
            for (int j = n - 2; j >= 0; j--){
                 array[j] += array[j + 1];
            }
        }
        return array[0];
    }

}