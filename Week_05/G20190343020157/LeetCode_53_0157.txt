class Solution {
    //执行用时 :126 ms, 在所有 Java 提交中击败了5.13%的用户内存消耗 :56.6 MB, 在所有 Java 提交中击败了5.01%的用户，实在太差了
    // public int maxSubArray(int[] nums) {
    //     int maxResult = nums[0];
    //     for (int i = 0; i < nums.length; i ++){
    //         int sum = 0;
    //         for (int j = i;j < nums.length; j ++){
    //             sum += nums[j];
    //             if(sum > maxResult){
    //                 maxResult = sum;
    //             }                
    //         }
    //     }

    //     return maxResult;
    // }

    //优化   动态规划思路
    //执行用时 :1 ms, 在所有 Java 提交中击败了99.98%的用户内存消耗 :37.6 MB, 在所有 Java 提交中击败了89.66%的用户
    public int maxSubArray(int[] nums) {
        if(nums.length == 0){
            return 0;
        }

        if(nums.length == 1){
            return nums[0];
        }
        int max = nums[0];
        for (int i = 1; i < nums.length; i ++){
            nums[i] = Math.max(nums[i - 1],0) + nums[i];
            max = nums[i] > max ? nums[i] : max;
        }

        return max;
    }
}