class Solution {
    public int maxProfit(int k, int[] prices) {

    if(prices == null || prices.length == 0){
        return 0;
    }
    int n = prices.length;

    if(k > prices.length / 2){
        int [][] dp = new int[prices.length][2];
        
        dp[0][0] = 0;
        dp[0][1] = -prices[0];

        for (int i = 1; i < prices.length; i ++){
            dp[i][0] = Math.max(dp[i - 1][0],dp[i - 1][1] + prices[i]);
            dp[i][1] = Math.max(dp[i - 1][0] - prices[i],dp[i - 1][1]);
        }
        return dp[prices.length - 1][0];
    }

    int[][][] dp = new int[n][k + 1][2];
    for (int i = 0; i < n; i++) 
        for (int k1 = k; k1 >= 1; k1--) {
            if (i - 1 == -1) { 
                dp[i][k1][0] = 0;
                dp[i][k1][1] = -prices[i];
                continue;
            }
            dp[i][k1][0] = Math.max(dp[i-1][k1][0], dp[i-1][k1][1] + prices[i]);
            dp[i][k1][1] = Math.max(dp[i-1][k1][1], dp[i-1][k1-1][0] - prices[i]);     
        }
    return dp[n - 1][k][0];
    }
}