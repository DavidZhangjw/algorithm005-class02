class Solution {
     public int maxProfit(int[] prices) {
         if (prices.length == 0){
             return 0;
         }
         int sum = 0;
         for (int i = 1 ;i  prices.length; i ++){
             if (prices[i]  prices[i - 1]){
                 sum += prices[i] - prices[i - 1];
             }
         }
         return sum;
     }

    public int maxProfit(int[] prices) {
         dp[i][k][0] = 第i天，已经进行过k次交易，当前没有持有股票
         dp[i][k][1] = 第i天，已经进行过k次交易，当前持有股票
        状态转移方程： dp[i][k][0] = dp[i - 1][k][0]    dp[i - 1][k - 1][1] + price[i]
        状态转移方程： dp[i][k][1] = dp[i - 1][k][1]    dp[i - 1][k][0] - price[i] 
        特殊情况 dp[0][0][0] = 0  dp[0][1][1] = -price[0]


        if(prices.length == 0  prices.length == 1){
            return 0;
        }
        int first = 0;
        int second = -prices[0];


        for (int i = 1; i  prices.length; i ++){
            first = Math.max(first,second + prices[i]);
            second = Math.max(second, first - prices[i]);
        }

        return first;
    }
}