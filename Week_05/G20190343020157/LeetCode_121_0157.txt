class Solution {
    // public int maxProfit(int[] prices) {
    //     if(prices == null || prices.length == 0){
    //         return 0;
    //     }
    //     int[] dp = new int[prices.length];
    //     dp[0] = 0;
    //     for (int i = 1; i < prices.length; i ++){
    //         dp[i] = prices[i] - prices[i - 1];
    //     }

    //     int max = dp[0];
    //     for (int i = 1 ; i < dp.length; i ++){
    //         dp[i] += Math.max(dp[i - 1],0) ;
    //         max = dp[i] > max ? dp[i] : max;
    //     }
        
    //     return max;
    // }

    public int maxProfit(int[] prices) {
        // dp[i][k][0] = 第i天，已经进行过k次交易，当前没有持有股票
        // dp[i][k][1] = 第i天，已经进行过k次交易，当前持有股票
        //状态转移方程： dp[i][k][0] = dp[i - 1][k][0]    dp[i - 1][k - 1][1] + price[i]
        //状态转移方程： dp[i][k][1] = dp[i - 1][k][1]    dp[i - 1][k][0] - price[i] 
        //特殊情况: dp[0][0][0] = 0  dp[0][1][1] = -price[0]


        if(prices.length == 0 || prices.length == 1){
            return 0;
        }
        int first = 0;
        int second = -prices[0];


        for (int i = 1; i < prices.length; i ++){
            first = Math.max(first,second + prices[i]);
            second = Math.max(second, - prices[i]);
        }

        return first;
    }
}