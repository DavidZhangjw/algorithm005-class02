class Solution {
    //执行用时 :2 ms, 在所有 Java 提交中击败了96.75%的用户内存消耗 :36.9 MB, 在所有 Java 提交中击败了81.83%的用户
    // public int minimumTotal(List<List<Integer>> triangle) {
    //     int rowCounts = triangle.size();
    //     int [] array = new int[rowCounts];
    //     List<Integer> list = triangle.get(rowCounts - 1);
    //     for (int i = 0; i < rowCounts; i ++){
    //         array[i] = list.get(i);
    //     }
    //     for (int i = rowCounts - 2; i >= 0; i --){
    //         List<Integer> tempList = triangle.get(i);
    //         for(int j = 0; j <= i; j ++){
    //             array[j] = Math.min(array[j],array[j + 1]) + tempList.get(j);
    //         }
    //     }
    //     return array[0];
    // }


    public int minimumTotal(List<List<Integer>> triangle) {
        int length = triangle.size();
        int [] array = new int[length];
        List<Integer> last = triangle.get(length - 1);
        for (int i = 0; i < length; i ++){
            array[i] = last.get(i);
        }

        for(int j = length - 2; j >= 0; j --){
            last = triangle.get(j);
            for (int i = 0; i <= j ; i ++){
                array[i] = Math.min(array[i],array[i + 1]) + last.get(i);
            }
        }

        return array[0];

    }
}