class Solution {

    //执行用时 :27 ms, 在所有 Java 提交中击败了5.60%的用户内存消耗 :49 MB, 在所有 Java 提交中击败5.06%的用户
    // public boolean lemonadeChange(int[] bills) {
    //     Map<Integer,Integer> map = new HashMap<>();
    //     for (int i = 0; i < bills.length; i ++){
    //         if (bills[i] == 5){
    //             if (map.get(5) == null){
    //                 map.put(5,1);
    //             }else{
    //                 map.put(5,map.get(5) + 1);
    //             }
    //         }else if (bills[i] == 10){
    //             if (map.get(5) != null && map.get(5) > 0){
    //                 map.put(5,map.get(5) - 1);
    //                 if (map.get(10) == null){
    //                     map.put(10,1);
    //                 }else{
    //                     map.put(10,map.get(10) + 1);
    //                 }
    //             }else{
    //                 return false;
    //             }
    //         }else{
    //             if (map.get(10) != null && map.get(10) > 0 && map.get(5) != null && map.get(5) > 0){
    //                 map.put(10,map.get(10) - 1);
    //                 map.put(5,map.get(5) - 1);
    //             }else if(map.get(5) != null && map.get(5) > 2){
    //                 map.put(5,map.get(5) - 3);
    //             }else{
    //                 return false;
    //             }
    //         }
    //     }
    //     return true;
    // }







    public boolean lemonadeChange(int[] bills) {
        int[] map = new int[]{0,0,0};
        return getCoin(bills,bills.length - 1,map);
    }

    public boolean getCoin(int[] bills,int index,int[] map){
        int value = bills[index];
        if (index == 0){
            if (value == 5){
                map[0] ++;
                return true;
            }else{
                return false;
            }
        }
        if (getCoin(bills,index - 1,map) == false){
            return false;
        }else{
            if (value == 5){
                map[0] ++;
                return true;
            }else if (value == 10){
                if (map[0] > 0){
                    map[0] -- ;
                    map[1] ++ ;
                    return true;
                }
                return false;
            }else{
                if (map[1]> 0 && map[0] > 0){
                    map[1] -- ;
                    map[0] -- ;
                    return true;
                }else if(map[0]> 2){
                    map[0] -= 3;
                    return true;
                }else{
                    return false;
                }
            }
        }
    }
}