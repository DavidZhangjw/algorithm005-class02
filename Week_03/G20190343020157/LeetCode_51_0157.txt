class Solution {


    public List<List<String>> solveNQueens(int n) {
        char[][] board = new char[n][n];
        for (int i = 0; i < board.length; i ++){
            for (int j = 0; j < board[0].length ; j ++){
                board[i][j] = '.';
            }
        }

        List<List<String>> result = new ArrayList<>();
        solveNQueens2(board,0,result);
        return result;



    }

    public void solveNQueens2(char[][] board ,int index,List<List<String>> result){
        if (index > board.length - 1){
            construct(board,result);
            return;
        }

        for (int i = 0; i < board.length; i ++){
            if (verify(board,index,i)){
                board[index][i] = 'Q';
                solveNQueens2(board,index + 1,result);
                board[index][i] = '.';
            }
        }
        
    }


    public boolean verify(char[][] board,int row,int column){
        for (int i = 0; i < board.length; i ++){
            for (int j = 0; j < board[0].length ; j ++){
                if (board[i][j] == 'Q' && (j == column || (j - i == column - row) || i + j == row + column)){
                    return false;
                }
            }
        }
        return true;
    }

    public void construct(char[][] board,List<List<String>> result){
        List<String> temp = new ArrayList<>();
        for (int i = 0; i < board.length; i ++){
            String s = new String(board[i]);
            temp.add(s);
        }
        result.add(temp);
    }

    
}