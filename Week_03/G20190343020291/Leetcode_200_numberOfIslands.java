import java.util.LinkedList;

/**
 *  岛屿的数量
 *  https://leetcode.com/problems/number-of-islands/
 */
public class Leetcode_200_numberOfIslands {
    /**
     * 方法1：DFS
     */
    public int numIslands(char[][] grid) {
        int num = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '1') {
                    dfs(grid, i, j);
                    num++;
                }
            }
        }
        return num;
    }


    private void dfs(char[][] grid, int i, int j) {
        if (i >= 0 && j >= 0 && i < grid.length && j < grid[0].length && grid[i][j] == '1') {
            grid[i][j] = '0';
            // 上下左右 search
            dfs(grid, i-1, j);
            dfs(grid, i+1, j);
            dfs(grid, i, j-1);
            dfs(grid, i, j+1);
        }
    }

    /**
     * 方法2： BFS
     */

    public static int numIslands2(char[][] grid) {
        int num = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '1') {
                    bfs(grid, i, j);
                    num++;
                }
            }
        }
        return num;
    }

    private static void bfs(char[][] grid, int i, int j) {
        LinkedList<Integer> queue = new LinkedList<>();
        int colNum = grid[0].length;
        queue.add(i * colNum  + j);
        grid[i][j] = '0'; // 必须add的时候置零，不能出队列的时候置零，会死循环

        while (!queue.isEmpty()) {
            int index = queue.poll();
            int row = index / colNum;
            int col = index % colNum;

            if (row > 0 && grid[row - 1][col] == '1') {
                queue.add((row - 1) * colNum + col);
                grid[row - 1][col] = '0';
            }
            if (row < grid.length - 1 && grid[row + 1][col] == '1') {
                queue.add((row + 1) * colNum + col);
                grid[row + 1][col] = '0';
            }
            if (col > 0 && grid[row][col - 1] == '1') {
                queue.add(row * colNum + col - 1);
                grid[row][col - 1] = '0';
            }
            if (col < grid[0].length - 1 && grid[row][col + 1] == '1') {
                queue.add(row * colNum + col + 1);
                grid[row][col + 1] = '0';
            }
        }
    }

    public static void main(String[] args) {
        char[][] grid = new char[][]{{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},{'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},{'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}};
        System.out.println(numIslands2(grid));
    }
}
