/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        if (root == null) return new LinkedList<>();
        List<List<Integer>> resultList = new LinkedList<>();
        List<Integer> list = new LinkedList<>();
        list.add(root.val);
        resultList.add(list);

        List<Node> tempNodeList = root.children;
        if (root.children != null) {
            do{
                List<Integer> integerList = new LinkedList<>();
                List<Node> childrenList = new LinkedList<>();
                for (Node node : tempNodeList){
                    integerList.add(node.val);
                    childrenList.addAll(node.children);
                }
                tempNodeList = childrenList;
                resultList.add(integerList);
            } while (tempNodeList.size() != 0);
        }

        return resultList;
    }
}