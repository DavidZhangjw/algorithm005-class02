/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {

    //执行用时 :9 ms, 在所有 java 提交中击败了94.95%的用户内存消耗 :35.8 MB, 在所有 java 提交中击败了80.21%的用户
    private TreeNode resultNode;
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        diGui(root,p,q);
        return resultNode;
    }

    public boolean diGui(TreeNode node, TreeNode p, TreeNode q){
        if (node == null){
            return false;
        }
        boolean selfResult = false;
        boolean leftResult = false;
        boolean rightResult = false;

        if(node == p || node == q){
            selfResult = true;
        }
        if (node.left != null){
            leftResult = diGui(node.left,p,q);
        }

        if (node.right != null){
            rightResult = diGui(node.right,p,q);
        }

        if((leftResult && rightResult) || (leftResult && selfResult) || (rightResult && selfResult)){
            resultNode = node;
        }else if (leftResult || rightResult || selfResult){
            return true;
        }
        return false;
    }
}