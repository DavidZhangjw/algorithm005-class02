/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private int[] preorder;
    private Map<Integer, Integer> hash;

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int preLen = preorder.length;
        int inLen = inorder.length;
        if (preLen != inLen) {
            throw new RuntimeException("Incorrct input data.");

        }
        this.preorder = preorder;
        hash = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            hash.put(inorder[i], i);
        }

        return buildTree(0, preLen - 1, 0, inLen - 1);

    }

    private TreeNode buildTree(int preLeft, int preRight, int inleft, int inRight) {
        //递归调用，先写递归终止条件
        if (preLeft > preRight || inleft > inRight) {
            return null;
        }


        int pivot = preorder[preLeft];
        TreeNode root = new TreeNode(pivot);

        Integer pivotIndex = hash.get(pivot);
        root.left = buildTree(preLeft + 1, pivotIndex - inleft + preLeft, inleft, pivotIndex - 1);
        root.right = buildTree(pivotIndex - inleft + preLeft + 1, preRight, pivotIndex + 1, inRight);
        return root;

    }
}
