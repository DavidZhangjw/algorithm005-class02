PriorityQueue 构造函数有多个

PriorityQueue()
Creates a PriorityQueue with the default initial capacity (11)
that orders its elements according to their natural ordering.
不指定容量，不指定比较方法

PriorityQueue​(int initialCapacity)
Creates a PriorityQueue with the specified initial capacity that orders its elements according to their natural ordering.
指定容量，不指定比较方法

PriorityQueue​(int initialCapacity, Comparator<? super E> comparator)
Creates a PriorityQueue with the specified initial capacity that orders its elements according to the specified comparator.
指定容量，并且指定比较方法

还有其他几个构造

下面是几个接口

**********************add 接口分析 ***********************

	add​(E e)
	
	public boolean add(E e) {
        return offer(e);
    }
	调用offer接口
	
	下面看offer接口的实现：
	    public boolean offer(E e) {
        if (e == null)
            throw new NullPointerException();
        modCount++;
        int i = size;
        if (i >= queue.length)
            grow(i + 1);//如果超出容量了，调用grow接口增加容量
        siftUp(i, e);//调用siftUp接口，进行优先级的处理
        size = i + 1;
        return true;
    }
	
	上面的接口中调用了grow和siftUp
	
	先分析简单的grow
	    private void grow(int minCapacity) {
        int oldCapacity = queue.length;
        // Double size if small; else grow by 50% //如果容量小的话，翻倍空间 如果容量大 增加50% 阈值是64字节
        int newCapacity = oldCapacity + ((oldCapacity < 64) ?
                                         (oldCapacity + 2) :
                                         (oldCapacity >> 1));
        // overflow-conscious code
        if (newCapacity - MAX_ARRAY_SIZE > 0)
            newCapacity = hugeCapacity(minCapacity);
        queue = Arrays.copyOf(queue, newCapacity);
    }
	
	再来看siftUp接口
	    private void siftUp(int k, E x) {
        if (comparator != null)
            siftUpUsingComparator(k, x);
        else
            siftUpComparable(k, x);
    }
	
	    private void siftUpUsingComparator(int k, E x) {
        while (k > 0) {
			//计算父节点所在的数组下标
            int parent = (k - 1) >>> 1;//>>>是不带符号的右移运算，符号位跟着一块移动
            Object e = queue[parent];
			//如果大于或者等于父节点则返回
            if (comparator.compare(x, (E) e) >= 0)
                break;
            queue[k] = e;//如果小于父节点将父节点与x交换位置，继续往上遍历比较父节点，直到根节点为止
            k = parent;
        }
        queue[k] = x;
    }
	
	    private void siftUpComparable(int k, E x) {
		//如果x未实现Comparable接口，此处会抛出ClassCastException异常 这个地方没有看懂
		
        Comparable<? super E> key = (Comparable<? super E>) x;
        while (k > 0) {
            int parent = (k - 1) >>> 1;
            Object e = queue[parent];
            if (key.compareTo((E) e) >= 0)
                break;
            queue[k] = e;
            k = parent;
        }
        queue[k] = key;
    }
	
	    public Comparator<? super E> comparator() {
        return comparator;
    }
	//返回比较器

	
**********************clear 接口分析 ***********************
    public void clear() {
        modCount++;
        for (int i = 0; i < size; i++)
            queue[i] = null;
        size = 0;
    }
	循环遍历所有元素置空 size置零
	
**********************contains​(Object o) 接口分析 ***********************

    public boolean contains(Object o) {
        return indexOf(o) >= 0;
    }

	
	    private int indexOf(Object o) {
        if (o != null) {
            for (int i = 0; i < size; i++)
                if (o.equals(queue[i]))
                    return i;
        }
        return -1;
    }

	循环遍历
	

**********************iterator() 接口分析 ***********************
    public Iterator<E> iterator() {
        return new Itr();
    }
	//an iterator over the elements in this queue 
	//这个的实现没有看明白
	
	
**********************	offer​(E e) 接口分析 ***********************
	add接口分析时已经分析了
	
**********************	remove​(Object o) 接口分析 ***********************
    public boolean remove(Object o) {
        int i = indexOf(o);
        if (i == -1)
            return false;
        else {
            removeAt(i);
            return true;
        }
    }
	
    E removeAt(int i) {
        // assert i >= 0 && i < size;
        modCount++;
        int s = --size;
        if (s == i) // removed last element
		//如果移除的是数组最后一个元素，直接置空，不影响二叉堆的平衡
            queue[i] = null;
        else {
            E moved = (E) queue[s];
			//moved元素是数组中最后一个元素，肯定位于二叉堆最下面的一层，因为下标i对应的节点跟moved节点不一定在同一个子树中，
            //而二叉堆不同子树无任何大小关系， 所以既可能大于也可能小于下标i节点对应的子节点
            //执行siftDown确保moved元素肯定小于其最小子节点元素
			//还没有看懂
            queue[s] = null;
			//即插入到下标为i时，moved元素刚好小于其最小的子节点，此时moved元素可能小于其父节点，所以需要执行siftUp方法，
            // 确保moved元素肯定大于或者等于其父节点
            siftDown(i, moved);
            if (queue[i] == moved) {
				siftUp(i, moved);
                //此时的moved元素实际没有向下调整而是向上调整了，即转移到了下标为i的前面，按数组下标遍历时就无法遍历了
                //为了迭代器能够遍历该元素，将该元素返回，由迭代器另外处理
                if (queue[i] != moved)
                    return moved;
            }
        }
        return null;
    }
	
	/**
     * 与siftUp相反，不断地将元素往下移动直到目标元素x小于或者等于最小的子节点
     * 之所以是跟最小的子节点比较，是为了确保如果发生跟最小的子节点交换位置，最小的子节点变成父节点了，这时父节点必须都小于两个
     * 子节点
     */	
    private void siftDown(int k, E x) {
        if (comparator != null)
            siftDownUsingComparator(k, x);
        else
            siftDownComparable(k, x);
    }


    private void siftDownUsingComparator(int k, E x) {
        int half = size >>> 1;
        while (k < half) {
            int child = (k << 1) + 1;
            Object c = queue[child];
            int right = child + 1;
            if (right < size &&
                comparator.compare((E) c, (E) queue[right]) > 0)
                c = queue[child = right];
            if (comparator.compare(x, (E) c) <= 0)
                break;
            queue[k] = c;
            k = child;
        }
        queue[k] = x;
    }


    private void siftDownComparable(int k, E x) {
        Comparable<? super E> key = (Comparable<? super E>)x;
        int half = size >>> 1;        // loop while a non-leaf
        while (k < half) {
            int child = (k << 1) + 1; // assume left child is least
            Object c = queue[child];
            int right = child + 1;
            if (right < size &&
                ((Comparable<? super E>) c).compareTo((E) queue[right]) > 0)
                c = queue[child = right];
            if (key.compareTo((E) c) <= 0)
                break;
            queue[k] = c;
            k = child;
        }
        queue[k] = key;
    }
	
	

	
	


